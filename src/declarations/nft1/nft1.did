type erc721_token = 
 service {
   acceptCycles: () -> ();
   allowance: (AllowanceRequest) -> (Result) query;
   approve: (ApproveRequest) -> ();
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__1) -> (Result_2) query;
<<<<<<< HEAD
   check_license_status: () -> (bool) query;
   create_invoice: () -> (CreateInvoiceResult);
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
   extensions: () -> (vec Extension) query;
   getAllowances: () -> (vec record {
                               TokenIndex;
                               principal;
                             }) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
<<<<<<< HEAD
                             AccountIdentifier__2;
=======
                             AccountIdentifier__1;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
                           }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata;
                         }) query;
<<<<<<< HEAD
   getTrait: (vec int) -> (vec int8);
   get_invoice: () -> (opt Invoice) query;
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
   http_request: (HttpRequest) -> (HttpResponse) query;
   inc: () -> (nat);
   metadata: (TokenIdentifier__1) -> (Result_1) query;
   mintNFT: (MintRequest) -> (TokenIndex);
<<<<<<< HEAD
   remaining_cycles: () -> (nat) query;
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
   setMinter: (principal) -> ();
   supply: (TokenIdentifier__1) -> (Result) query;
   toBytes: (text) -> (blob);
   tokenIdentifier: (text, TokenIndex) -> (TokenIdentifier__1);
   transfer: (TransferRequest) -> (TransferResponse);
<<<<<<< HEAD
   verify_invoice: () -> (VerifyInvoiceResult);
 };
type VerifyInvoiceSuccess = 
 variant {
   AlreadyVerified: record {invoice: Invoice;};
   Paid: record {invoice: Invoice;};
 };
type VerifyInvoiceResult = 
 variant {
   err: VerifyInvoiceErr;
   ok: VerifyInvoiceSuccess;
 };
type VerifyInvoiceErr = 
 record {
   kind:
    variant {
      Expired;
      InvalidAccount;
      InvalidInvoiceId;
      InvalidToken;
      NotAuthorized;
      NotFound;
      NotYetPaid;
      Other;
      TransferError;
    };
   message: opt text;
 };
type User = 
 variant {
   address: AccountIdentifier__1;
=======
 };
type User = 
 variant {
   address: AccountIdentifier;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
<<<<<<< HEAD
      CannotNotify: AccountIdentifier__1;
=======
      CannotNotify: AccountIdentifier;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
<<<<<<< HEAD
      Unauthorized: AccountIdentifier__1;
=======
      Unauthorized: AccountIdentifier;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
<<<<<<< HEAD
type TokenVerbose = 
 record {
   decimals: int;
   meta: opt record {Issuer: text;};
   symbol: text;
 };
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken) ->
                                (StreamingCallbackHttpResponse) query;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type Result_2 = 
 variant {
   err: CommonError;
<<<<<<< HEAD
   ok: AccountIdentifier__2;
=======
   ok: AccountIdentifier__1;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
<<<<<<< HEAD
type Permissions = 
 record {
   canGet: vec principal;
   canVerify: vec principal;
 };
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
<<<<<<< HEAD
type Invoice = 
 record {
   amount: nat;
   amountPaid: nat;
   creator: principal;
   destination: AccountIdentifier;
   details: opt Details;
   expiration: int;
   id: nat;
   paid: bool;
   permissions: opt Permissions;
   token: TokenVerbose;
   verifiedAtTime: opt int;
 };
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Extension = text;
<<<<<<< HEAD
type Details = 
 record {
   description: text;
   meta: blob;
 };
type CreateInvoiceSuccess = record {invoice: Invoice;};
type CreateInvoiceResult = 
 variant {
   err: CreateInvoiceErr;
   ok: CreateInvoiceSuccess;
 };
type CreateInvoiceErr = 
 record {
   kind:
    variant {
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidToken;
      Other;
    };
   message: opt text;
 };
=======
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AllowanceRequest = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
<<<<<<< HEAD
type AccountIdentifier__2 = text;
type AccountIdentifier__1 = text;
type AccountIdentifier = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
=======
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
>>>>>>> 0838e5d3e009742de0a1933affcdd17062508450
service : (principal) -> erc721_token
